-- Supabase schema for Bingo Nights

-- profiles table (extra user info) - Supabase Auth manages users
create table if not exists profiles (
  id uuid primary key references auth.users on delete cascade,
  username text,
  avatar_url text,
  created_at timestamptz default now()
);

-- games table: one row per active or past bingo game
create table if not exists games (
  id uuid primary key default gen_random_uuid(),
  host uuid references profiles(id) on delete set null,
  title text,
  max_players int default 100,
  state jsonb default '{}', -- extra game metadata
  status text default 'waiting', -- waiting|running|finished
  created_at timestamptz default now()
);

-- players table: players in a game
create table if not exists players (
  id uuid primary key default gen_random_uuid(),
  game_id uuid references games(id) on delete cascade,
  user_id uuid references profiles(id) on delete set null,
  seat_number int,
  card_id uuid,
  joined_at timestamptz default now(),
  active boolean default true
);

-- bingo_cards: each card assigned to a player
create table if not exists bingo_cards (
  id uuid primary key default gen_random_uuid(),
  game_id uuid references games(id) on delete cascade,
  numbers integer[][], -- 2D array of numbers (5x5)
  marked boolean[][], -- same shape as numbers; managed by clients/server
  owner_player uuid references players(id) on delete set null
);

-- called_numbers: numbers called by host in order
create table if not exists called_numbers (
  id bigint generated by default as identity primary key,
  game_id uuid references games(id) on delete cascade,
  number int not null,
  called_by uuid references profiles(id) on delete set null,
  called_at timestamptz default now()
);

-- bingo_claims: when a player calls bingo
create table if not exists bingo_claims (
  id uuid primary key default gen_random_uuid(),
  game_id uuid references games(id) on delete cascade,
  player_id uuid references players(id) on delete set null,
  card_snapshot jsonb, -- snapshot of card and marks for verification
  called_numbers_snapshot jsonb,
  verified boolean default false,
  resolved_at timestamptz
);

-- minimal indexes
create index if not exists idx_games_status on games(status);
create index if not exists idx_players_game on players(game_id);
create index if not exists idx_called_numbers_game on called_numbers(game_id);

-- Seed: demo game
insert into games (id, title, status)
values (gen_random_uuid(), 'Demo Room', 'waiting');

-- Function: verify_bingo
-- Verifies whether a provided card snapshot (jsonb) contains a winning bingo
-- card_snapshot format: { "numbers": [[..],[..],..], "marked": [[true,false,...], ...] }
-- called_numbers_snapshot: array of ints (in order)
create or replace function public.verify_bingo(card_snapshot jsonb, called_numbers_snapshot jsonb)
returns boolean
language plpgsql
as $$
declare
  marks boolean[][];
  r int;
  c int;
  size int := 5; -- standard 5x5 bingo
  row_bingo boolean;
  col_bingo boolean;
  diag1 boolean := true;
  diag2 boolean := true;
begin
  -- extract marked matrix
  if not (card_snapshot ? 'marked') then
    return false;
  end if;

  -- verify rows
  for r in 1..size loop
    row_bingo := true;
    for c in 1..size loop
      if not (card_snapshot->'marked'->(r-1)->> (c-1))::boolean then
        row_bingo := false;
        exit;
      end if;
    end loop;
    if row_bingo then
      return true;
    end if;
  end loop;

  -- verify columns
  for c in 1..size loop
    col_bingo := true;
    for r in 1..size loop
      if not (card_snapshot->'marked'->(r-1)->> (c-1))::boolean then
        col_bingo := false;
        exit;
      end if;
    end loop;
    if col_bingo then
      return true;
    end if;
  end loop;

  -- verify diagonals
  for r in 1..size loop
    if not (card_snapshot->'marked'->(r-1)->> (r-1))::boolean then
      diag1 := false;
    end if;
    if not (card_snapshot->'marked'->(r-1)->> (size-r))::boolean then
      diag2 := false;
    end if;
  end loop;

  if diag1 or diag2 then
    return true;
  end if;

  return false;
end;
$$;
